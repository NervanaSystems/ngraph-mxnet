// -*- mode: groovy -*-
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//This is a Jenkinsfile for nightly tests. The format and some functions have been picked up from the top-level Jenkinsfile

mx_lib = 'lib/libmxnet.so, lib/libmxnet.a, 3rdparty/dmlc-core/libdmlc.a, 3rdparty/tvm/nnvm/lib/libnnvm.a'

node('utility') {
  // Loading the utilities requires a node context unfortunately
  checkout scm
  utils = load('ci/Jenkinsfile_utils.groovy')
}
utils.assign_node_labels(utility: 'utility', linux_cpu: 'mxnetlinux-cpu', linux_gpu: 'mxnetlinux-gpu', linux_gpu_p3: 'mxnetlinux-gpu-p3', windows_cpu: 'mxnetwindows-cpu', windows_gpu: 'mxnetwindows-gpu')

utils.main_wrapper(
core_logic: {
  stage('Build') {
    parallel 'GPU: CUDA9.1+cuDNN7': {
      node(NODE_LINUX_CPU) {
        ws('workspace/build-gpu') {
          utils.init_git()
          //sh "ci/build.py --platform ubuntu_build_cuda /work/runtime_functions.sh build_ubuntu_gpu_cuda91_cudnn7"
          utils.docker_run('ubuntu_build_cuda', 'build_ubuntu_gpu_cuda91_cudnn7', false)
          utils.pack_lib('gpu', mx_lib)
        }
      }
    }
  }

  stage('NightlyTests'){
    parallel 'ImageClassification: GPU': {
      node(NODE_LINUX_GPU) {
        ws('workspace/nt-ImageClassificationTest') {
          utils.unpack_and_init('gpu', mx_lib)
          utils.docker_run('ubuntu_nightly_gpu', 'nightly_test_image_classification', true)
        }
      }
    },
    'KVStore_SingleNode: GPU': {
      node('mxnetlinux-gpu-p3-8xlarge') {
        ws('workspace/nt-KVStoreTest') {
          utils.unpack_and_init('gpu', mx_lib)
          utils.docker_run('ubuntu_nightly_gpu', 'nightly_test_KVStore_singleNode', true) 
        }
      }
    },
    'StraightDope: Python2 Single-GPU': {
      node(NODE_LINUX_GPU_P3) {
        ws('workspace/straight_dope-single_gpu') {
          utils.unpack_and_init('gpu', mx_lib)
          utils.docker_run('ubuntu_nightly_gpu', 'nightly_straight_dope_python2_single_gpu_tests', true)
        }
      }
    },
    'StraightDope: Python2 Multi-GPU': {
      node(NODE_LINUX_GPU) {
        ws('workspace/straight_dope-multi_gpu') {
          utils.unpack_and_init('gpu', mx_lib)
          utils.docker_run('ubuntu_nightly_gpu', 'nightly_straight_dope_python2_multi_gpu_tests', true)
        }
      }
    },
    'StraightDope: Python3 Single-GPU': {
      node(NODE_LINUX_GPU_P3) {
        ws('workspace/straight_dope-single_gpu') {
          utils.unpack_and_init('gpu', mx_lib)
          utils.docker_run('ubuntu_nightly_gpu', 'nightly_straight_dope_python3_single_gpu_tests', true)
        }
      }
    },
    'StraightDope: Python3 Multi-GPU': {
      node(NODE_LINUX_GPU) {
        ws('workspace/straight_dope-multi_gpu') {
          utils.unpack_and_init('gpu', mx_lib)
          utils.docker_run('ubuntu_nightly_gpu', 'nightly_straight_dope_python3_multi_gpu_tests', true)
        }
      }
    },
    'Tutorial: Python2': {
      node(NODE_LINUX_GPU) {
        ws('workspace/tutorial-test-python2') {
          utils.unpack_and_init('gpu', mx_lib)
          utils.docker_run('ubuntu_nightly_gpu', 'nightly_tutorial_test_ubuntu_python2_gpu', true, '1500m')
        }
      }
    },
    'Tutorial: Python3': {
      node(NODE_LINUX_GPU) {
        ws('workspace/tutorial-test-python3') {
          utils.unpack_and_init('gpu', mx_lib)
          utils.docker_run('ubuntu_nightly_gpu', 'nightly_tutorial_test_ubuntu_python3_gpu', true, '1500m')
        }
      }
    }
  }
}
,
failure_handler: {
  if (currentBuild.result == "FAILURE") {
    emailext body: 'Nightly tests for MXNet branch ${BRANCH_NAME} failed. Please view the build at ${BUILD_URL}', replyTo: '${EMAIL}', subject: '[NIGHTLY TEST FAILED] build ${BUILD_NUMBER}', to: '${EMAIL}'
  }
}
)
